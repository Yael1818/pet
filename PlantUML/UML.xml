@startuml
abstract class Pet {
    - name : String
    - age : int
    # species : String
    + getName() : String
    + getAge() : int
    + getSpecies() : String
    + makeSound() : String
    + eat() : String
}

class Dog {
    - breed : String
    + getBreed() : String
    + makeSound() : String
    + eat() : String
}
@startuml
abstract class Pet {
    - name : String
    - age : int
    # species : String
    + getName() : String
    + getAge() : int
    + getSpecies() : String
    + makeSound() : String
    + eat() : String
}

class Dog {
    - breed : String
    + getBreed() : String
    + makeSound() : String
    + eat() : String
}

class Cat {
    - color : String
    + getColor() : String
    + makeSound() : String
    + eat() : String
}

interface Veterinarian {
    + getName() : String
    + examinePet(pet: Pet) : String
}

class GeneralVeterinarian {
    - name : String
    + getName() : String
    + examinePet(pet: Pet) : String
}

class SpecialistVeterinarian {
    - specialty : String
    + examinePet(pet: Pet) : String
}

class PetClinic {
    + main(args: String[]) : void
}

Pet <|-- Dog
Pet <|-- Cat
Veterinarian <|.. GeneralVeterinarian
GeneralVeterinarian <|-- SpecialistVeterinarian
PetClinic --> Pet
PetClinic --> Veterinarian
@enduml
class Cat {
    - color : String
    + getColor() : String
    + makeSound() : String
    + eat() : String
}

interface Veterinarian {
    + getName() : String
    + examinePet(pet: Pet) : String
}

class GeneralVeterinarian {
    - name : String
    + getName() : String
    + examinePet(pet: Pet) : String
}

class SpecialistVeterinarian {
    - specialty : String
    + examinePet(pet: Pet) : String
}

class PetClinic {
    + main(args: String[]) : void
}

Pet <|-- Dog
Pet <|-- Cat
Veterinarian <|.. GeneralVeterinarian
GeneralVeterinarian <|-- SpecialistVeterinarian
PetClinic --> Pet
PetClinic --> Veterinarian
@enduml